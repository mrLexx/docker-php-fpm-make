name: php-fpm make
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch1
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    strategy:
      matrix:
        version: [8.3]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hubs
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get last version Docker
        run: echo "last_version_docker=$(curl -s 'https://hub.docker.com/v2/repositories/${{ vars.REPOSITORY_NAME }}-${{ matrix.version }}/tags' | jq -r '.results[-1].name')" >> $GITHUB_ENV
      - name: Get last version PHP
        run: echo "last_version_php=$(curl -s 'https://www.php.net/releases/active.php' | jq -r '.["8"]["${{ matrix.version }}"].version')" >> $GITHUB_ENV
      - name: Check docker version
        run: echo $last_version_docker
      - name: Check PHP version
        run: echo $last_version_php
      - name: Checkout
        if: ${{ env.last_version_docker != env.last_version_php }}
        uses: actions/checkout@v4
        with:
          submodules: recursive
      # - name: Build Php
      #   if: ${{ env.last_version_docker != env.last_version_php }}
      #   run: echo "make php...${{ env.last_version_php }}"
      # - name: Use local test-action
      #   if: ${{ env.last_version_docker != env.last_version_php }}
      #   uses: ./.github/actions/test-action
      #   with:
      #     version: ${{ matrix.version }}
      #     repository_name: ${{ vars.REPOSITORY_NAME }}
      - name: Build Php
        if: ${{ env.last_version_docker != env.last_version_php }}
        uses: ./.github/actions/php-fpm-make
        with:
          version: ${{ matrix.version }}
          repository_name: ${{ vars.REPOSITORY_NAME }}
        # - name: Build the Docker image
    #   run: cd ./docker-php-fpm-8.1 && make build REPOSITORY_NAME=$REPOSITORY_NAME
    # - name: Get version Php
    #   run:
    #     echo "php_version=$(docker run --rm $REPOSITORY_NAME-${{ matrix.version }} php -r 'echo PHP_MAJOR_VERSION . "." . PHP_MINOR_VERSION . "." . PHP_RELEASE_VERSION . "\n";')" >> $GITHUB_ENV
    # - name: Copy image with PHP version
    #   run: docker image tag $REPOSITORY_NAME-${{ matrix.version }} $REPOSITORY_NAME-${{ matrix.version }}:$php_version
    # - name: Push
    #   run:
    #     docker push $REPOSITORY_NAME-${{ matrix.version }} |
    #     docker push $REPOSITORY_NAME-${{ matrix.version }}:$php_version
